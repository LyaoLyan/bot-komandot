const TelegramApi = require('node-telegram-bot-api')
const sequelize = require("./db")
const UserModel = require("./models/user.model")
const token = '5580876526:AAFQeKmBlqmXoPC5eZhwRa4vVRTELunTNz4'
const bot = new TelegramApi(token, { polling: true })
const fs = require('fs')
const AdminModule = require('./modules/admin.module')

const { Op } = require("sequelize")

// function to encode file data to base64 encoded string
const base64_encode = (file) => {
    // read binary data
    var bitmap = fs.readFileSync(file)
    // convert binary data to base64 encoded string
    return new Buffer(bitmap).toString('base64')
}



const checkDate = (itemElem) => {
    return (/[a-z–∞-—è—ë]/.test(itemElem) || itemElem.length != 10)
}

const checkPhone = (itemElem) => {
    return (/[a-z–∞-—è—ë]/.test(itemElem))
}
const checkName = (itemElem) => {
    return /\d/.test(itemElem)
}

const start = async () => {


    await AdminModule.test()

    bot.on('message', async msg => {

        const text = msg.text
        const chatId = msg.chat.id

        try {
            await sequelize.authenticate()
            await sequelize.sync()
        } catch (error) {
            return bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ üòå`)
        }



        try {

            await checkUserInDb({ chatId })

            const user = await UserModel.findOne({ chatId })

            switch (text) {
                case '/start': {
                    await startFunc(user, chatId, msg)
                }
                    break
                case '/profile': {
                    await profileFunc(user, chatId, msg)
                }
                    break
                case 'D4%d87k}vLGG': {
                    await becomeAdmin(user, chatId, msg)
                }
                    break
                case '/search_by_date': {
                    await searchByDate(user, chatId, msg)
                }
                    break
                case '/search_phone': {
                    if (!user.admin) {
                        return bot.sendMessage(chatId, '–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @mishagina08')
                    }
                    await searchPhone(user, chatId, msg)
                }
                    break
                case '/search_id': {
                    if (!user.admin) {
                        return bot.sendMessage(chatId, '–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @mishagina08')
                    }
                    await searchId(user, chatId, msg)
                }
                    break

                default: {

                    await defaultFunc(user, chatId, msg)
                }
                    break
            }

        } catch (error) {
            console.log(error)
            await bot.sendMessage(chatId, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
        }

        // console.log(newUser.chatId);

        // if (text.indexOf('/name') !== -1) {
        //     const name = text.substr(5)
        //     return bot.sendMessage(newUser.chatId, `–¢–≤–æ–µ –∏–º—è ${name}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ /phone —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. \n–ü—Ä–∏–º–µ—Ä: /phone 89999999999`)
        // }
        // if (text.indexOf('/phone') !== -1) {
        //     const phone = text.substr(6)
        //     return bot.sendMessage(newUser.chatId, `–¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω ${phone}. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!`)
        // }

    })

}
start()





/* #region  Helper function */
const checkUserInDb = async ({ chatId }) => {
    let test = await UserModel.count({ chatId })

    console.log(Boolean(test))

    if (!Boolean(test)) {
        await UserModel.create({ chatId })
    }

}

const startFunc = async (user, chatId, msg) => {
    user.state = 0
    await user.save()
    return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –Ω–∞ –±–æ—Ä—Ç—É üö¢ –∫–æ—Ä–∞–±–ª—è "–ö–æ–º–∞–Ω–¥–æ—Ä"! üëã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —á–∞—Ç-–±–æ—Ç–µ –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –ë–ê–õ–õ–û–í‚ùóÔ∏è –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞". –ü—Ä–∏—Å—Ç—É–ø–∏–º! üî•‚¨áÔ∏è\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û`)

}


const profileFunc = async (user, chatId, msg) => {
    const file = `image/jpg;base64,${user.image}`;
    const fileOpts = {
        filename: 'image',
        contentType: 'image/jpg',
    };
    bot.sendMessage(chatId, `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\nID: ${user.id}\n–§–ò–û: ${user.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}`)
    return bot.sendPhoto(chatId, Buffer.from(file.substr(17), 'base64'), fileOpts);
}

const becomeAdmin = async (user, chatId, msg) => {
    user.admin = true
    await user.save()
    return bot.sendMessage(chatId, `/search_by_date - –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n/search_phone - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n/search_id - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID`)
}

const searchByDate = async (user, chatId, msg) => {
    user.state = 11
    await user.save()
    return bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2022-01-02",  2022 - –≥–æ–¥, –≥–¥–µ 01 - –º–µ—Å—è—Ü–∞, 02 - –¥–µ–Ω—å –º–µ—Å—è—Ü,`)
}
const searchPhone = async (user, chatId, msg) => {
    user.state = 12
    await user.save()
    return bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ  —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89999999999"`)
}

const searchId = async (user, chatId, msg) => {
    user.state = 13
    await user.save()
    return bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ  id`)
}
/* #endregion */


const defaultFunc = async (user, chatId, msg) => {

    switch (user.state) {
        case 0: {
            await calculate0(user, chatId, msg)
        }
            break
        case 1: {
            await calculate1(user, chatId, msg)
        }
            break
        case 2: {
            await calculate2(user, chatId, msg)
        }
            break
        case 11: {
            if (!user.admin) {
                return bot.sendMessage(chatId, '–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @mishagina08')
            }
            await calculate11(user, chatId, msg)
        }
            break
        case 12: {
            if (!user.admin) {
                console.log('12 –¢—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                return bot.sendMessage(chatId, '–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @mishagina08')

            }
            await calculate12(user, chatId, msg)
        }
            break
        case 13: {
            if (!user.admin) {
                console.log('13 –¢—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                return bot.sendMessage(chatId, '–≠—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @mishagina08')
            }
            await calculate13(user, chatId, msg)
        }
            break

        default:
            break
    }

}


const getEdgesOfDay = (date) => {
    const startOfDay = new Date(date)
    startOfDay.setUTCHours(0, 0, 0, 0)

    const endOfDay = new Date(date)
    endOfDay.setUTCHours(23, 59, 59, 999)

    return { startOfDay, endOfDay }
}

/* #region  Admin function */
const calculate11 = async (user, chatId, msg) => {
    try {


        var t = msg.text

        await bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è`)

        if (checkDate(t)) return bot.sendMessage(chatId, `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2022-01-02"`)

        const { startOfDay, endOfDay } = getEdgesOfDay(msg.text)

        const usersRaw = await UserModel.findAll({
            where: {
                createdAt: {
                    [Op.lt]: `${endOfDay.toISOString()}`,
                    [Op.gt]: `${startOfDay.toISOString()}`
                }
            },
        })

        let usersStrings = usersRaw.map(item => {
            const { id, name, phone } = item
            return `${id} | ${name} ${phone}`
        })

        return await bot.sendMessage(chatId, usersStrings.join('\n'))
    } catch (error) {
        if (error == "Error: ETELEGRAM: 400 Bad Request: message text is empty") {
            return await bot.sendMessage(chatId, `–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å`)
        } else {
            return await bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª –¥–∞?`)
        }

    }
}


const calculate12 = async (user, chatId, msg) => {
    try {
        const client = await UserModel.findOne({ where: { phone: msg.text } })
        const file = `image/jpg;base64,${client.image}`;
        const fileOpts = {
            filename: 'image',
            contentType: 'image/jpg',
        };
        bot.sendMessage(chatId, `${user.id} | ${user.name} ${user.phone}`)
        return bot.sendPhoto(chatId, Buffer.from(file.substr(17), 'base64'), fileOpts);
    } catch {
        if (er == "TypeError: Cannot read properties of null (reading 'image')") {
            return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        } else {
            return bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω?`)
        }
    }
}


const calculate13 = async (user, chatId, msg) => {
    try {
        const client = await UserModel.findByPk(Number(msg.text))
        const file = `image/jpg;base64,${client.image}`;
        const fileOpts = {
            filename: 'image',
            contentType: 'image/jpg',
        };

        bot.sendMessage(chatId, `${user.id} | ${user.name} ${user.phone}`)
        return bot.sendPhoto(chatId, Buffer.from(file.substr(17), 'base64'), fileOpts);
    } catch (er) {
        if (er == "TypeError: Cannot read properties of null (reading 'image')") {
            return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        } else {
            return bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª ID?`)
        }
    }

}
/* #endregion */


/* #region  User function */
const calculate0 = async (user, chatId, msg) => {
    const text = msg.text
    if (checkName(text)) {
        return bot.sendMessage(chatId, `–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, –§–ò–û —Å –æ—à–∏–±–∫–æ–π... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ üòâ. –ù–æ–º–µ—Ä –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –±–µ–∑ +7 –≤ –Ω–∞—á–∞–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89999999999"`)
    } else {
        user.state = 1
        user.name = text
        await user.save()
        return bot.sendMessage(chatId, `2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ "–ö–æ–ø–∏–ª–∫–∞", –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89999999999"`)
    }

}


const calculate1 = async (user, chatId, msg) => {
    const text = msg.text
    if (checkPhone(text)) {
        return bot.sendMessage(chatId, `–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Å –æ—à–∏–±–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑! üòä`)
    } else {
        user.state = 2
        user.phone = text
        await user.save()
        return bot.sendMessage(chatId, ``)
        // return bot.sendMessage(chatId, `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! üëç –ë–∞–ª–ª—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞" –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`)

    }
}


const calculate2 = async (user, chatId, msg) => {
    try {
        console.log(msg);
        user.state = 3
        let d = new Date()
        console.log(d);
        let y = new Date(d.getFullYear(), d.getMonth(), d.getDate())
        console.log(y);
        user.date = Number(y.getTime());
        console.log(user.date);
        const image = await bot.downloadFile(msg.document.file_id, './')
        // console.log(msg);

        const test5 = base64_encode(`./${image}`)

        fs.unlink(`./${image}`, (err) => {
            if (err) throw err //handle your error the way you want to;
            console.log('path/file.txt was deleted')//or else the file will be deleted
        })

        user.image = test5

        await user.save()
        return await bot.sendMessage(chatId, `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! üëç –ë–∞–ª–ª—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞" –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`)
    } catch (error) {

    }
}
/* #endregion */