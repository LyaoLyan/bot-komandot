const TelegramApi = require('node-telegram-bot-api')
const sequelize = require("./db")
const UserModel = require("./models")
const token = '5580876526:AAFQeKmBlqmXoPC5eZhwRa4vVRTELunTNz4'
const bot = new TelegramApi(token, { polling: true })
// const options = {
//     reply_markup: JSON.stringify({
//         inline_keyboard: [
//             [{ text: '–î–æ–±–∞–≤–∏—Ç—å –§–ò–û', callback_data: 'name' }],
//             [{ text: '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data: 'phone' }],
//             [{ text: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—É', callback_data: 'email' }],
//             [{ text: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ø–∏–ª–∫—É', callback_data: 'kopilka' }],
//         ]
//     })
// }
// const correct_name = {
//     reply_markup: JSON.stringify({
//         inline_keyboard: [
//             [{ text: '–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å', callback_data: 'put_name' }],
//             [{ text: '–î–∞, –¥–æ–±–∞–≤–∏—Ç—å', callback_data: 'add_name' }],
//         ]
//     })
// }
// const correct_phone = {
//     reply_markup: JSON.stringify({
//         inline_keyboard: [
//             [{ text: '–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å', callback_data: 'phone' }],
//             [{ text: '–î–∞, –¥–æ–±–∞–≤–∏—Ç—å', callback_data: 'add_phone' }],
//         ]
//     })
// }
const start = async () => {

    const checkPhone = (itemElem) => {
        // let checkCount = 0;
        // if (itemElem[0] == "+" && itemElem.length == 12) {
        //     checkCount = 1
        // } else if (itemElem.length == 11) {
        //     checkCount = 1
        // }
        return /[a-z–∞-—è—ë]/.test(itemElem)
    }
    const checkName = (itemElem) => {
        return /\d/.test(itemElem);
    }


    bot.on('message', async msg => {
        // await UserModel.drop()
        const text = msg.text;
        const chatId = msg.chat.id;
        try {
            await sequelize.authenticate()
            await sequelize.sync()
        } catch (error) {
            return bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ üòå`)
        }
        try {
            const user = await UserModel.findOne({ chatId })
            if (text === '/start') {
                user.state = 0
                    user.phone = text
                    await user.save()
                    return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –Ω–∞ –±–æ—Ä—Ç—É üö¢ –∫–æ—Ä–∞–±–ª—è "–ö–æ–º–∞–Ω–¥–æ—Ä"! üëã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —á–∞—Ç-–±–æ—Ç–µ –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –ë–ê–õ–õ–û–í‚ùóÔ∏è –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞". –ü—Ä–∏—Å—Ç—É–ø–∏–º! üî•‚¨áÔ∏è\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û`)

            } else if (user.state == 0) {
                const text = msg.text;
                if (checkName(text)) {
                    return bot.sendMessage(chatId, `–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, –§–ò–û —Å –æ—à–∏–±–∫–æ–π... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ üòâ`)
                } else {
                    user.state = 1
                    user.name = text
                    await user.save();
                    return bot.sendMessage(chatId, `2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ "–ö–æ–ø–∏–ª–∫–∞"`)
                }


            } else if (user.state == 1) {
                const text = msg.text;
                if (checkPhone(text)) {
                    return bot.sendMessage(chatId, `–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Å –æ—à–∏–±–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑! üòä`)
                } else {
                    user.state = 2
                    user.phone = text
                    await user.save();
                    return bot.sendMessage(chatId, `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! üëç –ë–∞–ª–ª—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞" –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`)
    
                }
                // user.state = 'phone'
                //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                

            } else if (user.state == 2) {
                await bot.sendMessage(chatId, `–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å! –í–∞—à–∏ –±–∞–ª–ª—ã —É–∂–µ –≤ –ø—É—Ç–∏ üòÅ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º—ã –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ ‚¨áÔ∏è\n/start`)
            }

        } catch (error) {
            await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! " + error)
        }

        // console.log(newUser.chatId);

        // if (text.indexOf('/name') !== -1) {
        //     const name = text.substr(5)
        //     return bot.sendMessage(newUser.chatId, `–¢–≤–æ–µ –∏–º—è ${name}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ /phone —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. \n–ü—Ä–∏–º–µ—Ä: /phone 89999999999`)
        // }
        // if (text.indexOf('/phone') !== -1) {
        //     const phone = text.substr(6)
        //     return bot.sendMessage(newUser.chatId, `–¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω ${phone}. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!`)
        // }

    })

}
start()