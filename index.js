const fetch = require('node-fetch');
const TelegramApi = require('node-telegram-bot-api')
const sequelize = require("./db")
const UserModel = require("./models")
const token = '5580876526:AAFQeKmBlqmXoPC5eZhwRa4vVRTELunTNz4'
const bot = new TelegramApi(token, { polling: true })
const fs = require('fs')
var http = require("https");



// function to encode file data to base64 encoded string
function base64_encode(file) {
    // read binary data
    var bitmap = fs.readFileSync(file);
    // convert binary data to base64 encoded string
    return new Buffer(bitmap).toString('base64');
}

const start = async () => {
    const checkDate = (itemElem) => {
        return (/[a-z–∞-—è—ë]/.test(itemElem) || itemElem.length > 10 || itemElem.length < 8)
    }

    const checkPhone = (itemElem) => {
        return (/[a-z–∞-—è—ë]/.test(itemElem) || itemElem.length != 11)
    }
    const checkName = (itemElem) => {
        return /\d/.test(itemElem);
    }

    bot.on('message', async msg => {
        // await sequelize.sync({force: true}) 
        // await UserModel.drop()
        const text = msg.text;
        const chatId = msg.chat.id;
        // let user;
        try {
            await sequelize.authenticate()
            await sequelize.sync()
        } catch (error) {
            return bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ üòå`)
        }



        try {
            const user = await UserModel.findOne({ chatId })

            if (text === '/start') {
                user.state = 0
                await user.save();
                return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –Ω–∞ –±–æ—Ä—Ç—É üö¢ –∫–æ—Ä–∞–±–ª—è "–ö–æ–º–∞–Ω–¥–æ—Ä"! üëã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —á–∞—Ç-–±–æ—Ç–µ –∑–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –ë–ê–õ–õ–û–í‚ùóÔ∏è –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞". –ü—Ä–∏—Å—Ç—É–ø–∏–º! üî•‚¨áÔ∏è\n1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û`)

            } else if (text === '/profile') {
                const date = new Date(user.updatedAt)
                return bot.sendMessage(chatId, `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\nID: ${user.id}\n–§–ò–û: ${user.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}`)
            } else if (text === 'D4%d87k}vLGG') {
                user.admin = true
                user.state = 11
                await user.save()
                return bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1 2 2022", –≥–¥–µ 1 - –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, 2 - –º–µ—Å—è—Ü, 2022 - –≥–æ–¥`)
            } else if (user.admin && user.state === 11) { 
                bot.sendMessage(chatId, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è`)
                if(checkDate(text)) return bot.sendMessage(chatId, `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1 2 2022"`)
                var day = text.slice(0, 1);
                var month = text.slice(2, 3)
                var year = text.slice(-4);
                user.state = 12
                await user.save()
                const below = new Date(year, month-1, day);
                const above = new Date(year, month-1, day+1);
                const users = await UserModel.findAll({
                    where: { updatedAt: {[sequelize.between] : [below, above]} },
                });
                let list;
                users.forEach((us) => {
                    list += `${us.id} ${us.name} ${us.phone}\n`
                  });
                return sendMessage(chatId, `${list}`)
            } else if (user.admin && text === '/search_phone') {
                user.state = 12
                await user.save()
                return bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ  —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89999999999"`)

            } else if (user.admin && user.state === 12) {
                const client = await UserModel.findOne({ where: { phone: text } });
                //–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç?
                return bot.sendMessage(chatId, `id:${user.id}\nname:${user.name}\nphone:${user.phone}`)
            } else if (user.admin && text === '/search_id') {
                user.state = 13
                await user.save()
                return bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ  id`)
            } else if (user.admin && user.state === 13) {
                const client = await UserModel.findOne({ where: { id: text } });
                //–∞ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç?
                return bot.sendMessage(chatId, `id:${user.id} name:${user.name} phone:${user.phone} `)
            } else if (user.state === 0) {
                const text = msg.text;
                if (checkName(text)) {
                    return bot.sendMessage(chatId, `–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, –§–ò–û —Å –æ—à–∏–±–∫–æ–π... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞ üòâ. –ù–æ–º–µ—Ä –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –±–µ–∑ +7 –≤ –Ω–∞—á–∞–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89999999999"`)
                } else {
                    user.state = 1
                    user.name = text
                    await user.save();
                    return bot.sendMessage(chatId, `2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–∞—Ä—Ç–µ "–ö–æ–ø–∏–ª–∫–∞", –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89999999999"`)
                }


            } else if (user.state === 1) {
                const text = msg.text;
                if (checkPhone(text)) {
                    return bot.sendMessage(chatId, `–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Å –æ—à–∏–±–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑! üòä`)
                } else {
                    user.state = 2
                    user.phone = text
                    await user.save();
                    return bot.sendMessage(chatId, `–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ`)
                    // return bot.sendMessage(chatId, `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å! üëç –ë–∞–ª–ª—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –∫–∞—Ä—Ç—É "–ö–æ–ø–∏–ª–∫–∞" –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`)

                }
            } else if (user.state === 2) {
                // console.log(msg)
                user.state = 3
                // base64_encode(
                // const url = `https://api.telegram.org/bot${token}/getFile?file_id=${msg.photo[2].file_id}`
                const response = await fetch(`https://api.telegram.org/bot${token}/getFile?file_id=${msg.photo[2].file_id}`);
                const data = await response.json();
                const path = data.result.file_path
                // download(`https://api.telegram.org/bot${token}/${path}`, 'file.jpg')
                const file = fs.createWriteStream("file.jpg");
                const request = http.get(`https://api.telegram.org/bot${token}/${path}`, function (response) {
                    response.pipe(file);
                });

                user.paycheck = base64_encode('file.jpg')
                await user.save();
                return bot.sendMessage(chatId, `${user.paycheck}`)
                // await bot.sendMessage(chatId, `–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å! –í–∞—à–∏ –±–∞–ª–ª—ã —É–∂–µ –≤ –ø—É—Ç–∏ üòÅ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º—ã –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ ‚¨áÔ∏è\n/start`)
            }

        } catch (error) {
            await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! " + error)
        }

        // console.log(newUser.chatId);

        // if (text.indexOf('/name') !== -1) {
        //     const name = text.substr(5)
        //     return bot.sendMessage(newUser.chatId, `–¢–≤–æ–µ –∏–º—è ${name}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ /phone —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. \n–ü—Ä–∏–º–µ—Ä: /phone 89999999999`)
        // }
        // if (text.indexOf('/phone') !== -1) {
        //     const phone = text.substr(6)
        //     return bot.sendMessage(newUser.chatId, `–¢–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω ${phone}. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!`)
        // }

    })

}
start()